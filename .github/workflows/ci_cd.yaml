name: CI/CD Elixir

on:
    push:
      branches: [main]
    pull_request:
      branches: [main]
    workflow_dispatch:

jobs:
    ci:
        runs-on: ubuntu-latest
        name: Compile with mix test, format & dialyzer
        env:
            MIX_ENV: test
            ImageOS: ubuntu22
        steps:
            - uses: actions/checkout@v4

            - name: Setup Elixir
              uses: erlef/setup-beam@v1.17.3
              with:
                  version-file: .tool-versions
                  version-type: strict

            - name: Parse version from .tool-versions
              id: parse-asdf
              run: ./scripts/versions.sh

            - name: Cache deps directory
              uses: actions/cache@v4
              id: cache-deps
              with:
                path: |
                    deps
                    _build
                key: ${{ runner.os }}-mix-erlang-${{ env.ERLANG_VERSION }}-elixir-${{ env.ELIXIR_VERSION }}-${{ hashFiles('**/mix.lock') }}
                restore-keys: |
                    ${{ runner.os }}-mix-erlang-${{ env.ERLANG_VERSION }}-elixir-${{ env.ELIXIR_VERSION }}-

            - name: Get dependencies
              if: steps.cache-deps.outputs.cache-hit != 'true'
              run: mix deps.get

            - run: mix compile

            - name: Check code is formatted
              run: mix format --check-formatted

            - name: Run tests
              run: mix test --max-failures 1 --trace --warnings-as-errors

            - name: Check unused dependencies
              run: mix deps.unlock --check-unused

    build-push:
      runs-on: ubuntu-latest
      needs: ci
      name: Build Docker Image and push to ghcr.io
      steps:
        - uses: actions/checkout@v4

        - name: Set up QEMU for multi-architecture builds
          run: |
            sudo apt-get update -y
            sudo apt-get install -y binfmt-support qemu-user-static
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes -c yes

        - name: Login to GHCR
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GH_PAT }}
            
        - name: Docker Meta
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: |
              ghcr.io/rodrigosantiag/simple_api

            tags: |
              type=raw,value=latest,enable={{is_default_branch}}
              type=ref,event=pr
              type=sha,format=short

        - name: Parse version from .tool-versions
          id: parse-asdf
          run: ./scripts/versions.sh

          
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
          
        - uses: docker/setup-buildx-action@v3

        - uses: docker/build-push-action@v6
          with:
            context: .
            cache-from: type=registry,ref=ghcr.io/rodrigosantiag/simple_api:cache
            cache-to: type=registry,ref=ghcr.io/rodrigosantiag/simple_api:cache,mode=max
            tags: ${{ steps.meta.outputs.tags }}
            platforms: linux/amd64,linux/arm64
            labels: ${{ steps.meta.outputs.labels }}
            push: true
            build-args: |
              ELIXIR_VERSION=${{ env.ELIXIR_VERSION }}
              OTP_VERSION=${{ env.ERLANG_VERSION }}
    deploy:
      runs-on: ubuntu-latest
      needs: build-push

      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        TF_WORKING_DIR: terraform
        TF_VAR_ssh_key_id: ${{ secrets.SSH_KEY_ID }}
        TF_VAR_github_username: ${{ secrets.GH_USERNAME }}
        TF_VAR_github_token: ${{ secrets.GH_PAT }}
        TF_VAR_do_token: ${{ secrets.DO_KEY }}
        TF_VAR_secret_key_base: ${{ secrets.SECRET_KEY_BASE }}
        TF_VAR_private_key: ${{ secrets.DO_PRIVATE_KEY }}
      
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Install doctl
          uses: digitalocean/action-doctl@v2
          with:
            token: ${{ secrets.DO_KEY }}

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Authenticate with Terraform Cloud
          env:
            TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          run: |
            mkdir -p ~/.terraform.d
            echo "{\"credentials\": {\"app.terraform.io\": {\"token\": \"$TF_API_TOKEN\"}}}" > ~/.terraform.d/credentials.tfrc.json

        - name: Initialize Terraform
          run: terraform init
          working-directory: ${{ env.TF_WORKING_DIR }}

        - name: Set NEXT_COLOR Based on Droplets
          run: |
            # Fetch the list of droplets with the doctl command
            DROPLETS=$(doctl compute droplet list --format Name --no-header)
            
            # Check if any droplet names contain "elixir-api-blue" and "elixir-api-green"
            BLUE_DROPLETS=$(echo "$DROPLETS" | grep "elixir-api-blue" || true)
            GREEN_DROPLETS=$(echo "$DROPLETS" | grep "elixir-api-green" || true)
        
            # Determine next color based on the droplet names
            if [ -n "$BLUE_DROPLETS" ] && [ -n "$GREEN_DROPLETS" ]; then
              # Both colors exist, decide on the next color dynamically
              echo "Both Blue and Green droplets found, switching to the next color."
              CURRENT_COLOR=$(terraform output -raw active_color || echo "blue")
              if [ "$CURRENT_COLOR" == "blue" ]; then
                NEXT_COLOR="green"
              else
                NEXT_COLOR="blue"
              fi
            else
              # If one of the colors does not exist, deploy to the other color
              if [ -z "$BLUE_DROPLETS" ]; then
                NEXT_COLOR="blue"
              elif [ -z "$GREEN_DROPLETS" ]; then
                NEXT_COLOR="green"
              fi
            fi
            
            # Set the NEXT_COLOR for subsequent steps
            echo "NEXT_COLOR=$NEXT_COLOR" >> $GITHUB_ENV
            echo "Next color set to $NEXT_COLOR"

        - name: Validate Terraform
          run: terraform validate
          working-directory: ${{ env.TF_WORKING_DIR }}

        - name: Plan Terraform
          run: terraform plan -var="active_color=${{ env.NEXT_COLOR }}" -out=tfplan
          working-directory: ${{ env.TF_WORKING_DIR }}

        - name: Apply Terraform
          run: terraform apply --auto-approve tfplan
          working-directory: ${{ env.TF_WORKING_DIR }}